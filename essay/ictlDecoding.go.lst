var KFs map[uint16][]byte

/*
* Omitted functions' signatures:
* func XOR(src1 []byte, src2 []byte) []byte
* func decompress(original []byte, compressionAlgorithm string) []byte
* func decodeHeader(packet []byte)
        (isDF bool, compressionAlgorithm string, id uint16, payload []byte)
*/

func decode(packet []byte) []byte {
  isDF, algo, id, payload := decodeHeader(packet)
  data := decompress(payload, algo)
  if isDF {
    return decodeDF(data, id)
  } else {
    return decodeKF(data, id)
  }
}

func decodeKF(message []byte, id uint16) []byte {
  KFs[id] = make([]byte, len(message))
  copy(KFs[id], message)
  return message
}

func decodeDF(diff []byte, referredID uint16) []byte {
  base, ok := KFs[referredID}
  if !ok { // not found
    return nil
  } else {
    return XOR(base, diff)
  }
}
